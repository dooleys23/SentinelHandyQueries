// Get USB plugin events
DeviceEvents
| where ActionType == "UsbDevicePluggedIn"
| project TimeGenerated, ActionType, InitiatingUser, DeviceName, Vendor, DriveLetter, DeviceId

// All processes run with full local permissions
DeviceProcessEvents
| where InitiatingProcessTokenElevation == "TokenElevationTypeFull"
| project TimeGenerated, DeviceName, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessTokenElevation

// Devices that haven't been scanned in 30 days
DeviceTvmSecureConfigurationAssessment
| where Timestamp > ago(30d)
| where ConfigurationId == "AntivirusScanType" 
| where ConfigurationSubId == "FullScan"
| where ComplianceStatus == "NonCompliant"
| summarize arg_max(Timestamp, *) by DeviceName
| project DeviceName, Timestamp, ComplianceStatus, ConfigurationSubId

// Identify USB plugin events through command line args with VID or PID
DeviceProcessEvents
| where TimeGenerated > ago(1d)
| where ProcessCommandLine contains "VID"
and ProcessCommandLine contains "PID"
| summarize count() by FileName, ProcessVersionInfoInternalFileName

// Higher confidence mechanism of identifying USB events via CLI
DeviceProcessEvents
| where TimeGenerated > ago(14d)
| where ProcessCommandLine matches regex @"(?i)(USB\\VID).*(PID)"


// Make a series of USB devices plugged in per day per device per drive letter
let start_time = toscalar(DeviceEvents | summarize min(TimeGenerated));
let end_time = toscalar(DeviceEvents | summarize max(TimeGenerated));
DeviceEvents
| where ActionType == 'UsbDriveMounted'
| extend DriveLetter_ = tostring(AdditionalFields.DriveLetter)
| extend Manufacturer_ = tostring(AdditionalFields.Manufacturer)
| extend ProductName_ = tostring(AdditionalFields.ProductName)
| extend ProductRevision_ = tostring(AdditionalFields.ProductRevision)
| extend SerialNumber_ = tostring(AdditionalFields.SerialNumber)
| summarize Count = count() by bin(TimeGenerated, 1d), DeviceName
| make-series Count = sum(Count) default = 0 on TimeGenerated from start_time to end_time step 1d by DeviceName
| project TimeGenerated, DeviceName, Count








// Get the subnets being used by Defender Onboarded Devices
DeviceNetworkInfo
| where TimeGenerated > ago(3h)
| where ConnectedNetworks[0].Description contains "network name"
or ConnectedNetworks[1].Description contains "network name"
or ConnectedNetworks[2].Description contains "network name"
| extend IPAddress_ = tostring(IPAddresses[0].IPAddress)
| extend SubnetPrefix_ = tostring(IPAddresses[0].SubnetPrefix)
| extend IPAddress2_ = tostring(IPAddresses[1].IPAddress)
| extend SubnetPrefix2_ = tostring(IPAddresses[1].SubnetPrefix)
| project IPAddress_, SubnetPrefix_, IPAddress2_, SubnetPrefix2_, NetworkAdapterType




DeviceNetworkInfo
| where TimeGenerated > ago(3h)
| where ConnectedNetworks[0].Description contains "network name"
   or ConnectedNetworks[1].Description contains "network name"
   or ConnectedNetworks[2].Description contains "network name"
| mv-expand IPAddresses
| extend IPAddress = tostring(IPAddresses.IPAddress),
         SubnetPrefix = tostring(IPAddresses.SubnetPrefix),
         SubnetCIDR = strcat(IPAddress, "/", SubnetPrefix)
| summarize Hosts = count() by SubnetCIDR, NetworkAdapterType








DeviceNetworkInfo
| where TimeGenerated > ago(3h)
| where ConnectedNetworks[0].Description contains "network name"
   or ConnectedNetworks[1].Description contains "network name"
   or ConnectedNetworks[2].Description contains "network name"
| mv-expand IPAddresses
| extend IPAddress = tostring(IPAddresses.IPAddress),
         SubnetPrefix = tostring(IPAddresses.SubnetPrefix),
         SubnetCIDR = strcat(IPAddress, "/", SubnetPrefix)
| summarize IPAddresses = make_set(IPAddress) by SubnetCIDR, NetworkAdapterType



DeviceNetworkInfo
| where TimeGenerated > ago(3h)
| where ConnectedNetworks[0].Description contains "network name"
   or ConnectedNetworks[1].Description contains "network name"
   or ConnectedNetworks[2].Description contains "network name"
| mv-expand IPAddresses
| extend IPAddress = tostring(IPAddresses.IPAddress),
         SubnetPrefix = tostring(IPAddresses.SubnetPrefix),
         SubnetCIDR = strcat(IPAddress, "/", SubnetPrefix)
| summarize IPAddresses = make_set(IPAddress) by SubnetCIDR, NetworkAdapterType
